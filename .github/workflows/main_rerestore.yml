name: Build & Deploy (API + Vite SPA) - rerestore

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20'
  API_CSPROJ: 'API/API.csproj'
  CLIENT_DIR: 'client'  # ← 프론트 폴더명이 다르면 여기만 수정 (예: src/Web)

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 프론트 폴더 존재 확인 (안전장치)
      - name: Verify client directory
        shell: pwsh
        run: |
          if (-not (Test-Path "${{ env.CLIENT_DIR }}/package.json")) {
            Write-Host "Could not find package.json under $env:CLIENT_DIR"
            Write-Host "Candidates:"
            Get-ChildItem -Recurse -Filter package.json | Select-Object -Expand FullName
            throw "CLIENT_DIR is wrong. Update env.CLIENT_DIR to your frontend path."
          }

      # 프론트 빌드 (React 19 RC 대비)
      - name: Install deps & build client
        working-directory: ${{ env.CLIENT_DIR }}
        env:
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
        run: |
          npm ci --legacy-peer-deps
          npm run build

      # dist 존재 여부 확인 (빌드 실패 사전 검출)
      - name: Verify dist exists
        shell: pwsh
        run: |
          if (-not (Test-Path "${{ env.CLIENT_DIR }}/dist")) {
            throw "Build did not produce a dist folder. Check npm logs above."
          }

      # API/wwwroot 로 동기화
      - name: Sync client build into API/wwwroot
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "API/wwwroot" | Out-Null
          Remove-Item -Recurse -Force "API/wwwroot/*" -ErrorAction SilentlyContinue
          Copy-Item -Recurse -Force "${{ env.CLIENT_DIR }}/dist/*" "API/wwwroot/"

      # API만 Publish (솔루션 레벨 경고 회피)
      - name: Publish API
        run: dotnet publish "${{ env.API_CSPROJ }}" -c Release -o "${{ github.workspace }}\publish"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ${{ github.workspace }}\publish

  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ./publish

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3299A948605E4FA194957D05F93AEAD7 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B0C095B28D054D4EB3D5430EB34D597F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5CA9B0B342374DD890EC48D097A7E6D2 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: rerestore
          slot-name: Production
          package: ./publish